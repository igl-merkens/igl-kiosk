This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  workflows/
    python-package.yml
src/
  fullscreen_web_display/
    core/
      __init__.py
      browser.py
      url_injector.py
    ui/
      __init__.py
      main_window.py
      templates.py
    utils/
      __init__.py
      shortcuts.py
    __init__.py
    main.py
tests/
  __init__.py
  test_browser.py
  test_url_injector.py
.gitignore
pyproject.toml
README.md
requirements.txt
setup.py

================================================================
Files
================================================================

================
File: .github/workflows/python-package.yml
================
# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest tests

================
File: src/fullscreen_web_display/core/__init__.py
================
"""Core functionality for the fullscreen web display."""

from .url_injector import URLInjector
from .browser import BackgroundLoader, URLHandler

================
File: src/fullscreen_web_display/core/browser.py
================
"""
Core browser functionality for background loading and URL handling.
"""

from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtCore import QUrl, pyqtSignal, QObject


class BackgroundLoader(QObject):
    """Handles background loading of web pages."""

    load_completed = pyqtSignal(bool, str, QWebEngineView)  # success, url, web_view

    def __init__(self):
        super().__init__()
        self.loading_views = []

    def load_url(self, url):
        """Load a URL in the background."""
        if not url.startswith(("http://", "https://")):
            url = "https://" + url

        print(f"Loading URL in background: {url}")

        # Create new hidden web view for background loading
        web_view = QWebEngineView()
        self.loading_views.append(web_view)

        # Connect load finished signal
        web_view.loadFinished.connect(
            lambda success: self._on_load_finished(success, url, web_view)
        )

        # Start loading in background
        web_view.setUrl(QUrl(url))

        return web_view

    def _on_load_finished(self, success, url, web_view):
        """Handle when background loading is finished."""
        if web_view in self.loading_views:
            self.loading_views.remove(web_view)

        self.load_completed.emit(success, url, web_view)

    def cleanup(self):
        """Clean up all loading views."""
        for view in self.loading_views:
            view.deleteLater()
        self.loading_views.clear()


class URLHandler:
    """Utility class for URL processing."""

    @staticmethod
    def normalize_url(url):
        """Normalize a URL by adding protocol if missing."""
        if not url.strip():
            return ""

        url = url.strip()
        if not url.startswith(("http://", "https://")):
            url = "https://" + url

        return url

    @staticmethod
    def is_valid_url(url):
        """Basic URL validation."""
        normalized = URLHandler.normalize_url(url)
        return bool(normalized and "." in normalized)

================
File: src/fullscreen_web_display/core/url_injector.py
================
"""
URL Injector module for handling external URL injection via file monitoring.
"""

import json
import threading
import time
from pathlib import Path
from PyQt6.QtCore import QObject, pyqtSignal


class URLInjector(QObject):
    """Handles external URL injection via file monitoring."""

    url_received = pyqtSignal(str)

    def __init__(self, command_file_path="web_display_commands.json"):
        super().__init__()
        self.command_file = Path(command_file_path)
        self.last_modified = 0
        self.monitoring = True
        self.monitoring_thread = None

        # Create command file if it doesn't exist
        if not self.command_file.exists():
            self.create_command_file()

    def create_command_file(self):
        """Create initial command file with instructions."""
        initial_data = {
            "instructions": "To display a website, update this file with: {'url': 'https://example.com'}",
            "url": "",
        }
        with open(self.command_file, "w") as f:
            json.dump(initial_data, f, indent=2)

    def start_monitoring(self):
        """Start monitoring the command file in a separate thread."""
        if self.monitoring_thread is None or not self.monitoring_thread.is_alive():
            self.monitoring = True
            self.monitoring_thread = threading.Thread(
                target=self._monitor_file, daemon=True
            )
            self.monitoring_thread.start()

    def _monitor_file(self):
        """Monitor the command file for changes."""
        while self.monitoring:
            try:
                if self.command_file.exists():
                    current_modified = self.command_file.stat().st_mtime

                    if current_modified > self.last_modified:
                        self.last_modified = current_modified
                        self._process_command_file()

            except Exception as e:
                print(f"Error monitoring file: {e}")

            time.sleep(0.5)  # Check every 500ms

    def _process_command_file(self):
        """Process the command file and extract URL."""
        try:
            with open(self.command_file, "r") as f:
                data = json.load(f)

            url = data.get("url", "").strip()
            if url and url != "":
                print(f"Received URL command: {url}")
                self.url_received.emit(url)

        except (json.JSONDecodeError, FileNotFoundError) as e:
            print(f"Error processing command file: {e}")

    def stop_monitoring(self):
        """Stop monitoring the command file."""
        self.monitoring = False
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            self.monitoring_thread.join(timeout=1.0)

    @property
    def command_file_path(self):
        """Get the absolute path to the command file."""
        return self.command_file.absolute()

================
File: src/fullscreen_web_display/ui/__init__.py
================
"""User interface components."""

from .main_window import FullscreenWebBrowser
from .templates import get_welcome_html, get_loading_status_script

__all__ = ["FullscreenWebBrowser", "get_welcome_html", "get_loading_status_script"]

================
File: src/fullscreen_web_display/ui/main_window.py
================
"""
Main window implementation for the fullscreen web browser.
"""

from PyQt6.QtWidgets import QMainWindow, QVBoxLayout, QWidget, QStackedWidget
from PyQt6.QtWebEngineWidgets import QWebEngineView

from ..core.url_injector import URLInjector
from ..core.browser import BackgroundLoader, URLHandler
from ..utils.shortcuts import ShortcutManager
from .templates import get_welcome_html, get_loading_status_script


class FullscreenWebBrowser(QMainWindow):
    """Main fullscreen web browser window."""

    def __init__(self):
        super().__init__()
        self.background_loader = BackgroundLoader()
        self.shortcut_manager = ShortcutManager(self)
        self.url_injector = None

        self.init_ui()
        self.setup_url_injector()

    def init_ui(self):
        """Initialize the user interface."""
        # Set window properties
        self.setWindowTitle("Fullscreen Web Display")

        # Create central widget and layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(0, 0, 0, 0)  # Remove margins for true fullscreen

        # Create stacked widget to manage multiple web views
        self.stacked_widget = QStackedWidget()
        layout.addWidget(self.stacked_widget)

        # Create main web view (visible)
        self.main_web_view = QWebEngineView()
        self.stacked_widget.addWidget(self.main_web_view)

        # Set up keyboard shortcuts
        self.shortcut_manager.setup_shortcuts(
            self.main_web_view, self.close, self.toggle_fullscreen
        )

        # Load initial page
        self.load_initial_page()

        # Go fullscreen
        self.showFullScreen()

    def setup_url_injector(self):
        """Set up the URL injector for external commands."""
        self.url_injector = URLInjector()
        self.url_injector.url_received.connect(self.load_url)
        self.url_injector.start_monitoring()

        # Connect background loader signals
        self.background_loader.load_completed.connect(self.on_background_load_finished)

        print(f"Monitoring command file: {self.url_injector.command_file_path}")
        print(
            "Update the JSON file with {'url': 'https://example.com'} to display websites"
        )

    def load_initial_page(self):
        """Load the initial welcome page."""
        self.main_web_view.setHtml(get_welcome_html())

    def load_url(self, url):
        """Load a URL in the background and display when fully loaded."""
        normalized_url = URLHandler.normalize_url(url)

        if not URLHandler.is_valid_url(normalized_url):
            print(f"Invalid URL: {url}")
            self.show_loading_status(f"Invalid URL: {url}")
            return

        # Show loading status on current page
        self.show_loading_status(f"Loading {normalized_url}...")

        # Start background loading
        self.background_loader.load_url(normalized_url)

    def show_loading_status(self, message):
        """Show loading status on the current page."""
        script = get_loading_status_script(message)
        self.main_web_view.page().runJavaScript(script)

    def on_background_load_finished(self, success, url, web_view):
        """Handle when background loading is finished."""
        if success:
            print(f"Successfully loaded: {url}")
            print("Switching to loaded page...")

            # Remove the old main web view from stacked widget
            self.stacked_widget.removeWidget(self.main_web_view)
            old_web_view = self.main_web_view

            # Move the loaded web view to become the main view
            self.main_web_view = web_view
            self.stacked_widget.addWidget(self.main_web_view)
            self.stacked_widget.setCurrentWidget(self.main_web_view)

            # Clean up old web view
            old_web_view.deleteLater()

            # Update shortcuts to work with new web view
            self.shortcut_manager.cleanup()
            self.shortcut_manager.setup_shortcuts(
                self.main_web_view, self.close, self.toggle_fullscreen
            )

        else:
            print(f"Failed to load: {url}")
            # Show error on current page
            self.show_loading_status(f"Failed to load {url}")

            # Clean up failed loading web view
            web_view.deleteLater()

    def toggle_fullscreen(self):
        """Toggle between fullscreen and windowed mode."""
        if self.isFullScreen():
            self.showNormal()
        else:
            self.showFullScreen()

    def closeEvent(self, event):
        """Handle close event."""
        if self.url_injector:
            self.url_injector.stop_monitoring()

        self.background_loader.cleanup()
        self.shortcut_manager.cleanup()

        event.accept()

================
File: src/fullscreen_web_display/ui/templates.py
================
"""
HTML templates for the web display application.
"""


def get_welcome_html():
    """Get the welcome page HTML."""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Fullscreen Web Display</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                margin: 0;
                padding: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                text-align: center;
            }
            .container {
                max-width: 800px;
                padding: 40px;
            }
            h1 {
                font-size: 3em;
                margin-bottom: 30px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .info {
                font-size: 1.2em;
                line-height: 1.6;
                margin-bottom: 30px;
            }
            .command-example {
                background: rgba(0,0,0,0.3);
                padding: 20px;
                border-radius: 10px;
                font-family: monospace;
                font-size: 1.1em;
                margin: 20px 0;
            }
            .shortcuts {
                margin-top: 40px;
                font-size: 1em;
                opacity: 0.8;
            }
            .status {
                position: fixed;
                top: 20px;
                right: 20px;
                background: rgba(0,0,0,0.5);
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 0.9em;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌐 Fullscreen Web Display</h1>
            <div class="info">
                Ready to display websites injected via external commands!<br>
                <small>Pages load in background and display when fully loaded</small>
            </div>
            <div class="command-example">
                Command file: web_display_commands.json<br>
                Format: {"url": "https://example.com"}
            </div>
            <div class="shortcuts">
                <strong>Keyboard Shortcuts:</strong><br>
                ESC - Exit • F11 - Toggle Fullscreen • Ctrl+R - Reload
            </div>
        </div>
        <div class="status" id="status">Ready</div>
    </body>
    </html>
    """


def get_loading_status_script(message):
    """Get JavaScript to update loading status."""
    return f"""
    (function() {{
        var statusDiv = document.getElementById('status');
        if (statusDiv) {{
            statusDiv.textContent = '{message}';
            statusDiv.style.background = 'rgba(255, 165, 0, 0.8)';
        }}
    }})();
    """

================
File: src/fullscreen_web_display/utils/__init__.py
================
"""Utility modules."""

from .shortcuts import ShortcutManager

__all__ = ["ShortcutManager"]

================
File: src/fullscreen_web_display/utils/shortcuts.py
================
"""
Keyboard shortcuts utilities.
"""

from PyQt6.QtGui import QKeySequence, QShortcut


class ShortcutManager:
    """Manages keyboard shortcuts for the application."""

    def __init__(self, parent):
        self.parent = parent
        self.shortcuts = []

    def setup_shortcuts(self, main_web_view, close_callback, fullscreen_callback):
        """Set up all keyboard shortcuts."""
        # ESC to exit fullscreen/quit
        quit_shortcut = QShortcut(QKeySequence("Escape"), self.parent)
        quit_shortcut.activated.connect(close_callback)
        self.shortcuts.append(quit_shortcut)

        # F11 to toggle fullscreen
        fullscreen_shortcut = QShortcut(QKeySequence("F11"), self.parent)
        fullscreen_shortcut.activated.connect(fullscreen_callback)
        self.shortcuts.append(fullscreen_shortcut)

        # Ctrl+R to reload
        reload_shortcut = QShortcut(QKeySequence("Ctrl+R"), self.parent)
        reload_shortcut.activated.connect(main_web_view.reload)
        self.shortcuts.append(reload_shortcut)

    def cleanup(self):
        """Clean up shortcuts."""
        for shortcut in self.shortcuts:
            shortcut.deleteLater()
        self.shortcuts.clear()

================
File: src/fullscreen_web_display/__init__.py
================
"""
Fullscreen Web Display with External URL Injection
A PyQt6-based fullscreen web browser that can receive URLs via external commands.
"""

__version__ = "0.0.1"
__author__ = "Maximilian Erkens"
__email__ = "max@max-erkens.de"

from .main import main

__all__ = ["main"]

================
File: src/fullscreen_web_display/main.py
================
#!/usr/bin/env python3
"""
Main entry point for the Fullscreen Web Display application.
"""

import sys
from pathlib import Path
from PyQt6.QtWidgets import QApplication

from .ui.main_window import FullscreenWebBrowser


def main():
    """Main function to run the application."""
    # Note: High DPI scaling settings are commented out as they may cause issues
    # on some systems. Uncomment if needed:
    # QApplication.setHighDpiScaleFactorRoundingPolicy(
    #     QApplication.HighDpiScaleFactorRoundingPolicy.PassThrough
    # )

    app = QApplication(sys.argv)
    app.setApplicationName("Fullscreen Web Display")

    # Create and show the browser
    browser = FullscreenWebBrowser()

    print("\n" + "=" * 60)
    print("Fullscreen Web Display Started")
    print("=" * 60)
    print(f"Command file: {Path('web_display_commands.json').absolute()}")
    print("\nTo display a website, update the JSON file with:")
    print('{"url": "https://example.com"}')
    print("\nKeyboard shortcuts:")
    print("  ESC - Exit application")
    print("  F11 - Toggle fullscreen")
    print("  Ctrl+R - Reload current page")
    print("=" * 60)

    # Run the application
    sys.exit(app.exec())


if __name__ == "__main__":
    main()

================
File: tests/__init__.py
================
"""Test suite for fullscreen web display."""

================
File: tests/test_browser.py
================
"""Tests for browser functionality."""

import unittest
from unittest.mock import MagicMock, patch

from PyQt6.QtCore import QCoreApplication

from fullscreen_web_display.core.browser import BackgroundLoader, URLHandler


class TestURLHandler(unittest.TestCase):
    """Test cases for URLHandler class."""
    
    def test_normalize_url_with_protocol(self):
        """Test URL normalization with existing protocol."""
        url = "https://example.com"
        normalized = URLHandler.normalize_url(url)
        self.assertEqual(normalized, "https://example.com")
    
    def test_normalize_url_without_protocol(self):
        """Test URL normalization without protocol."""
        url = "example.com"
        normalized = URLHandler.normalize_url(url)
        self.assertEqual(normalized, "https://example.com")
    
    def test_normalize_empty_url(self):
        """Test normalization of empty URL."""
        normalized = URLHandler.normalize_url("")
        self.assertEqual(normalized, "")
        
        normalized = URLHandler.normalize_url("   ")
        self.assertEqual(normalized, "")
    
    def test_is_valid_url(self):
        """Test URL validation."""
        self.assertTrue(URLHandler.is_valid_url("example.com"))
        self.assertTrue(URLHandler.is_valid_url("https://example.com"))
        self.assertFalse(URLHandler.is_valid_url(""))
        self.assertFalse(URLHandler.is_valid_url("invalid"))


class TestBackgroundLoader(unittest.TestCase):
    """Test cases for BackgroundLoader class."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.app = QCoreApplication.instance()
        if self.app is None:
            self.app = QCoreApplication([])
        
        self.loader = BackgroundLoader()
    
    def tearDown(self):
        """Clean up test fixtures."""
        self.loader.cleanup()
    
    @patch('fullscreen_web_display.core.browser.QWebEngineView')
    def test_load_url(self, mock_web_view):
        """Test URL loading."""
        mock_view = MagicMock()
        mock_web_view.return_value = mock_view
        
        test_url = "example.com"
        web_view = self.loader.load_url(test_url)
        
        # Should normalize URL and set it
        mock_view.setUrl.assert_called_once()
        # Should connect load finished signal
        mock_view.loadFinished.connect.assert_called_once()
    
    def test_cleanup(self):
        """Test cleanup functionality."""
        # Add mock views to loading_views
        mock_view1 = MagicMock()
        mock_view2 = MagicMock()
        self.loader.loading_views = [mock_view1, mock_view2]
        
        self.loader.cleanup()
        
        # Should call deleteLater on all views
        mock_view1.deleteLater.assert_called_once()
        mock_view2.deleteLater.assert_called_once()
        # Should clear the list
        self.assertEqual(len(self.loader.loading_views), 0)


if __name__ == '__main__':
    unittest.main()

================
File: tests/test_url_injector.py
================
# tests/test_url_injector.py
"""Tests for URL injector functionality."""

import json
import tempfile
import time
import unittest
from pathlib import Path
from unittest.mock import patch, MagicMock

from PyQt6.QtCore import QCoreApplication
from PyQt6.QtTest import QSignalSpy

from fullscreen_web_display.core.url_injector import URLInjector


class TestURLInjector(unittest.TestCase):
    """Test cases for URLInjector class."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.app = QCoreApplication.instance()
        if self.app is None:
            self.app = QCoreApplication([])
        
        # Create temporary file for testing
        self.temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False)
        self.temp_file.close()
        self.temp_path = Path(self.temp_file.name)
        
        self.injector = URLInjector(str(self.temp_path))
    
    def tearDown(self):
        """Clean up test fixtures."""
        self.injector.stop_monitoring()
        if self.temp_path.exists():
            self.temp_path.unlink()
    
    def test_create_command_file(self):
        """Test command file creation."""
        # Remove the file if it exists
        if self.temp_path.exists():
            self.temp_path.unlink()
        
        # Create new injector which should create the file
        injector = URLInjector(str(self.temp_path))
        
        self.assertTrue(self.temp_path.exists())
        
        with open(self.temp_path, 'r') as f:
            data = json.load(f)
        
        self.assertIn('instructions', data)
        self.assertIn('url', data)
        self.assertEqual(data['url'], '')
    
    def test_url_signal_emission(self):
        """Test that URL changes emit signals."""
        spy = QSignalSpy(self.injector.url_received)
        
        # Write URL to command file
        test_url = "https://example.com"
        with open(self.temp_path, 'w') as f:
            json.dump({"url": test_url}, f)
        
        # Process the file change
        self.injector._process_command_file()
        
        # Check that signal was emitted
        self.assertEqual(len(spy), 1)
        self.assertEqual(spy[0][0], test_url)
    
    def test_empty_url_ignored(self):
        """Test that empty URLs are ignored."""
        spy = QSignalSpy(self.injector.url_received)
        
        # Write empty URL to command file
        with open(self.temp_path, 'w') as f:
            json.dump({"url": ""}, f)
        
        self.injector._process_command_file()
        
        # Check that no signal was emitted
        self.assertEqual(len(spy), 0)
    
    def test_invalid_json_handling(self):
        """Test handling of invalid JSON."""
        # Write invalid JSON
        with open(self.temp_path, 'w') as f:
            f.write("invalid json")
        
        # Should not raise exception
        try:
            self.injector._process_command_file()
        except Exception as e:
            self.fail(f"Processing invalid JSON raised an exception: {e}")

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
venv
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to save .idea/project-specific/misc.xml under version control.
#.idea/

# Application specific
web_display_commands.json
*.json.bak
*.log

# OS specific
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

================
File: pyproject.toml
================
[project]
name = "igl-informer_kiosk"
version = "0.0.1"
description = "A kiosk application for IGL Informer"
authors = [
    { name = "Maximilian Erkens", email = "max@max-erkens.de" }
]
license = { file = "LICENSE" }
#dependencies = [
#    "PyQt6 == 6.4.0",
#    "PyQt6-WebEngine == 6.4.0",
#]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

================
File: requirements.txt
================
PyQt6>=6.4.0
PyQt6-WebEngine>=6.4.0

================
File: setup.py
================
"""Setup script for Fullscreen Web Display."""

from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

with open("requirements.txt", "r", encoding="utf-8") as fh:
    requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]

setup(
    name="fullscreen-web-display",
    version="0.0.1",
    author="Maximilian Erkens",
    author_email="max@max-erkens.de",
    description="A PyQt6-based fullscreen web browser with external URL injection",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/Maxjr2/fullscreen-web-display",
    package_dir={"": "src"},
    packages=find_packages(where="src"),
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Topic :: Internet :: WWW/HTTP :: Browsers",
        "Topic :: Software Development :: Libraries :: Python Modules",
    ],
    python_requires=">=3.8",
    install_requires=requirements,
    entry_points={
        "console_scripts": [
            "fullscreen-web-display=fullscreen_web_display.main:main",
        ],
    },
    keywords="qt pyqt6 browser fullscreen web display kiosk",
    project_urls={
        "Bug Reports": "https://github.com/yourusername/fullscreen-web-display/issues",
        "Source": "https://github.com/yourusername/fullscreen-web-display",
    },
)

================
File: README.md
================
# Fullscreen Web Display

A PyQt6-based fullscreen web browser that can receive URLs via external commands, perfect for kiosk displays, digital signage, or presentation systems.

## Features

- **Fullscreen Display**: Runs in fullscreen mode by default
- **External URL Injection**: Load websites by updating a JSON command file
- **Background Loading**: Pages load in the background and display when fully loaded
- **Keyboard Shortcuts**: ESC to exit, F11 to toggle fullscreen, Ctrl+R to reload
- **Error Handling**: Graceful handling of loading failures
- **Clean Architecture**: Well-organized, modular codebase

## Installation

### From Source

1. Clone the repository:

```bash
git clone https://github.com/yourusername/fullscreen-web-display.git
cd fullscreen-web-display
```

2. Install dependencies:

```bash
pip install -r requirements.txt
```

3. Install the package:

```bash
pip install -e .
```

### Using pip (if published)

```bash
pip install fullscreen-web-display
```

## Usage

### Running the Application

```bash
# If installed via pip
fullscreen-web-display

# Or run directly
python -m fullscreen_web_display.main
```

### Displaying Websites

The application monitors a JSON file called `web_display_commands.json` in the current directory. To display a website:

1. Create or edit the `web_display_commands.json` file:

```json
{
  "url": "https://example.com"
}
```

2. The application will automatically detect the change and load the website in the background
3. Once fully loaded, it will switch to display the new page

### Keyboard Shortcuts

- **ESC**: Exit the application
- **F11**: Toggle fullscreen mode
- **Ctrl+R**: Reload the current page

## Development

### Running Tests

```bash
python -m pytest tests/
```

### Code Style

The project follows PEP 8 guidelines. Use tools like `black` or `autopep8` for formatting:

```bash
black src/
```

### Adding Features

1. Fork the repository
2. Create a feature branch
3. Add your changes in reasonable commits
4. Add tests for new functionality
5. Submit a pull request

## Requirements

- Python 3.8+
- PyQt6 >= 6.4.0
- PyQt6-WebEngine >= 6.4.0

## Use Cases

- **Digital Signage**: Display rotating web content on screens
- **Kiosk Systems**: Show specific web applications in fullscreen
- **Presentation Systems**: Display web-based presentations
- **Monitoring Dashboards**: Show real-time web dashboards
- **Remote Display Control**: Control what's displayed from external scripts

## Troubleshooting

### Common Issues

1. **PyQt6 Installation**: Make sure you have PyQt6 and PyQt6-WebEngine installed
2. **File Permissions**: Ensure the application can create and monitor the JSON file
3. **Network Issues**: Check internet connectivity if pages fail to load

### Debug Mode

Set the environment variable `DEBUG=1` to enable verbose logging:

```bash
DEBUG=1 fullscreen-web-display
```

## License

This project is currently copyrighted by me but contributions are very welcome.
I just have to find the right open source license.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Changelog

### v1.0.0

- Initial release
- Fullscreen web display functionality
- External URL injection via JSON file
- Background loading
- Keyboard shortcuts
- Modular architecture



================================================================
End of Codebase
================================================================
